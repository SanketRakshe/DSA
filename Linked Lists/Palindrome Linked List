Given the head of a singly linked list, return true if it is a 
palindrome
 or false otherwise.

 

Example 1:


Input: head = [1,2,2,1]
Output: true
Example 2:


Input: head = [1,2]
Output: false
 

Constraints:

The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9

Code:

Approach 1:
------------

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool checkPalindrome(vector<int> arr) {
        int n = arr.size();
        int s = 0;
        int e = n-1;
        while(s <= e) {
            if(arr[s] != arr[e]) {
                return 0;
            }
            s++;
            e--;
        } 
        return 1;
    }
    bool isPalindrome(ListNode* head) {
        vector<int> arr;
        ListNode* temp = head;
        while(temp != NULL) {
            arr.push_back(temp -> val);
            temp = temp -> next;
        }
        return checkPalindrome(arr);
    }
};

Aproach 2:
-----------

class Solution {
public:
    ListNode* getMiddle(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head -> next;
        while(fast != NULL && fast -> next != NULL) {
            fast = fast -> next -> next;
            slow = slow -> next;
        } 
        return slow;
    }
    ListNode* Reverse(ListNode* head) {
        ListNode* curr = NULL;
        ListNode* prev = NULL;
        ListNode* Next = NULL;

        while(curr != NULL) {
            Next = curr -> next;
            curr -> next = prev;
            prev = curr;
            curr = Next;
        }
        return prev;
    }

    bool isPalindrome(ListNode* head) {
        if(head -> next == NULL) {
            return true;
        }

        //step 1: Find Middle
        ListNode* middle = getMiddle(head);

        //Step 2: Reverse the list after middle node
        ListNode* temp = middle -> next;
        middle -> next = Reverse(temp);

        //Step 3: Compare both halves
        ListNode* head1 = head;
        ListNode* head2 = middle -> next;

        while(head2 != NULL) {
            if(head2 -> val != head1 -> val) {
                return 0;
            }
            head1 = head1 -> next;
            head2 = head2 -> next;
        }

        //Step 4: Repeat step 2
        temp = middle -> next;
        middle -> next = Reverse(temp);

        return true;
    }
};

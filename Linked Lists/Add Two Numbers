You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.


Approach 1:
-----------
/*
class SinglyLinkedListNode {
    public:
        int data;
        SinglyLinkedListNode* next;

        SinglyLinkedListNode() {
            this->data = 0;
            this->next = NULL;
        }

        SinglyLinkedListNode(int data) {
            this->data = data;
            this->next = NULL;
        }

        SinglyLinkedListNode(int data, SinglyLinkedListNode* next) {
            this->data = data;
            this->next = next;
        }
};*/

class Solution {
public:
	SinglyLinkedListNode*  addTwoNumbers(SinglyLinkedListNode* & l1, SinglyLinkedListNode* & l2) {
		SinglyLinkedListNode* dummy = new SinglyLinkedListNode();
        SinglyLinkedListNode* temp = dummy;
        int carry = 0;
        while(l1 != NULL || l2 != NULL || carry) {
            int sum = 0;
            if(l1 != NULL) {
                sum += l1 -> data;
                l1 = l1 -> next;
            }
            if(l2 != NULL) {
                sum += l2 -> data;
                l2 = l2-> next;
            }
            sum += carry;
            carry = sum / 10;
            SinglyLinkedListNode* node = new SinglyLinkedListNode(sum % 10);
            temp -> next = node;
            temp = temp -> next;
        }
        return dummy -> next;
	}
};



Approach 2:
------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private:
    void insertAtTail(ListNode* &head1, ListNode* &tail1,  int data) {
        
        ListNode* temp = new ListNode(data);
        
        if(head1 == NULL) {
            head1 = temp;
            tail1 = temp;
            return;
        }
        else {
            tail1 -> next = temp;
            tail1 = temp;
        }
    }
    
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        ListNode* ansHead = NULL;
        ListNode* ansTail = NULL;
        
        int sum = 0;
        int carry = 0;
        
        
        while(l1 != NULL || l2 != NULL || carry != 0) {
            
            int val1 = 0;
            int val2 = 0;
            
            if(l1 != NULL) {
                val1 = l1 -> val;
            }
            if(l2 != NULL) {
                val2 = l2 -> val;
            }
            
            sum = val1 + val2 + carry;
            
            int digit = sum % 10;
            carry = sum / 10;
            
            insertAtTail(ansHead, ansTail, digit);
            
            if(l1 != NULL) {
                l1 = l1 -> next;
            }
            if(l2 != NULL) {
                l2 = l2 -> next;
            }            
        }
        return ansHead;
    }
};

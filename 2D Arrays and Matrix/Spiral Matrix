Given an m x n matrix, return all elements of the matrix in spiral order.

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:


Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100


Code 1:
----------

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
       vector<int> ans;
       int row = matrix.size();
       int col = matrix[0].size();

       int left = 0;
       int right = col - 1;
       int top = 0;
       int bottom = row - 1;

       int count = 0;
       int total = (row * col);

       while(count < total) {

           //Print left to right
           for(int i = left; count < total && i <= right; i++) {
               ans.push_back(matrix[top][i]);
               count++;
           }
           top++;

           //Print top to down
           for(int i = top; count < total && i <= bottom; i++) {
               ans.push_back(matrix[i][right]);
               count++;
           }
            right--;

           //Print Right to left
           for(int i = right; count < total && i >= left; i--) {
               ans.push_back(matrix[bottom][i]);
               count++;
           }
           bottom--;

           //Print Bottom to Top
           for(int i = bottom; count < total && i >= top; i--) {
               ans.push_back(matrix[i][left]);
               count++;
           }
            left++;
       }
       return ans;
    }
};


Code 2 
----------
/*

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
       vector<int> ans;
       int row = matrix.size();
       int col = matrix[0].size();

       int left = 0;
       int right = col - 1;
       int top = 0;
       int bottom = row - 1;

       while(left <= right && top <= bottom) {

           //Print left to right
           for(int i = left; left <= right && top <= bottom && i <= right; i++) {
               ans.push_back(matrix[top][i]);
           }
           top++;

           //Print top to down
           for(int i = top; left <= right && top <= bottom && i <= bottom; i++) {
               ans.push_back(matrix[i][right]);
           }
            right--;

           //Print Right to left
           for(int i = right; left <= right && top <= bottom && i >= left; i--) {
               ans.push_back(matrix[bottom][i]);
           }
           bottom--;

           //Print Bottom to Top
           for(int i = bottom; left <= right && top <= bottom && i >= top; i--) {
               ans.push_back(matrix[i][left]);
           }
            left++;
       }
       return ans;
    }
};

*/

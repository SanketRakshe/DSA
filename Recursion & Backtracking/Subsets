Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.

//Code:

class Solution {
public:
void solve(int ind, vector<int> nums, vector<int> ds, vector<vector<int>>& ans) {
	if(ind == nums.size()) {
		ans.push_back(ds);
		return ;
	}
	//element pick condition 
	ds.push_back(nums[ind]);
	solve(ind+1, nums, ds, ans);
	ds.pop_back();
	//element nonPick Condition
	solve(ind+1, nums, ds, ans);
}
	vector<vector<int>> subsets(vector<int>& nums) {
		vector<vector<int>> ans;
		vector<int> ds;
		int ind = 0;
		solve(ind, nums, ds, ans);
		return ans;
	}
};

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

Code:
------

class Solution {
public:
    bool isValid(string s) {
        stack<int> stk;
        int n = s.size();

        for(int i = 0; i < n; i++) {
            //for openin brackets
            char ch = s[i];
            if( ch == '(' || ch == '{' || ch == '[' ) {
                stk.push(ch);
            }
            else {
                if(!stk.empty()) {
                    //for closing brackets
                    if( (ch == ')' && stk.top() == '(') ||
                        (ch == '}' && stk.top() == '{') ||
                        (ch == ']' && stk.top() == '[') ) {
                        stk.pop();
                    } 
                    else {
                        return false;
                    }
                } 
                else {
                    return false;
                }
            }
        }
        if(stk.empty()) {
            return true;
        }
        else {
            return false;
        }
    }
};

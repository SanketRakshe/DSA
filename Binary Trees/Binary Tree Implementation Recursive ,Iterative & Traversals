#include<iostream>
#include<queue>
using namespace std;

class node {

    public:
            //Properties:
            int data;
            node* left;
            node* right;

            //behavior

            node(int d) {
                this -> data = d;
                this -> left = NULL;
                this -> right = NULL;
            }
};

node* buildTree(node* root) {

    cout<<"Enter the data:" << endl;
    int data;
    cin>>data;
    root = new node(data);

    if(data == -1) {
        return NULL;
    }

    cout<<"Enter data for inserting in the left of " << data << endl;
    root -> left = buildTree(root -> left);
    cout<<"Enter data for inserting it the right of " << data << endl;
    root -> right = buildTree(root -> right);

    return root;

}

void levelOrderTraversal(node* root) {

    queue<node*> q;
    q.push(root);
    q.push(NULL);

    while(!q.empty()) {
        node* temp = q.front();
        q.pop();
        if(temp == NULL) {
            cout<<endl;
            if(!q.empty()) {
                q.push(NULL);
            }
        }
        else {
            cout<< temp->data << " ";

            if(temp->left) {
                q.push(temp->left);
            }
            if(temp->right) {
                q.push(temp->right);
            }
        }
    }
}

void inOrderTraversal(node* root) {

    if(root == NULL) {
        return;
    }

    inOrderTraversal(root->left);
    cout<< root->data << " ";
    inOrderTraversal(root->right);
}

void preOrderTraversal(node* root) {

    if(root == NULL) {
        return;
    }

    cout<< root->data << " ";
    preOrderTraversal(root->left);
    preOrderTraversal(root->right);
}

void postOrderTraversal(node* root) {

    if(root == NULL) {
        return;
    }

    postOrderTraversal(root->left);
    postOrderTraversal(root->right);
    cout<< root->data <<" ";
}

void buildFromLevelOrder(node* &root) {
    
    queue<node*> q;

    cout<<"Enter the data for root: "<<endl;
    int data;
    cin>>data;
    root = new node(data);

    q.push(root);

    while(!q.empty()) {
        node* temp = q.front();
        q.pop();

        cout<<"Enter left node for: " <<temp->data<<endl;
        int leftdata;
        cin>>leftdata;

        if(leftdata != -1) {
            temp -> left = new node(leftdata);
            q.push(temp -> left);
        }

        cout<<"Enter right node for: "<< temp-> data <<endl;
        int rightdata;
        cin>>rightdata;

        if(rightdata != -1) {
            temp -> right = new node(rightdata);
            q.push(temp->right);
        }
    }
}

int main() {

    node* root = NULL;
    root = buildTree(root);

    //buildFromLevelOrder(root);
    levelOrderTraversal(root);

    /*
    //1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1

    cout<<"level order traversal: "<< endl;
    levelOrderTraversal(root);

    cout<<"\ninorder traversal" << endl;
    inOrderTraversal(root);

    cout<<"\npreorder traversal" << endl;
    preOrderTraversal(root);

    cout<<"\npostorder traversal" << endl;
    postOrderTraversal(root);

    */


    return 0;
}

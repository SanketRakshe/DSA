/*
Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

Example 1:

Input: nums = [1,1,1], k = 2 
Output: 2
Explanation: 
Example 2:

Input: nums = [1,2,3], k = 3 
Output: 2
Explanation: 
Constraints:

*1 <= nums.length <= 2 **
1
0
4
10 
4
 
-1000 <= nums[i] <= 1000
-
1
0
7
10 
7
  <= k <= 
1
0
7
10 
7
*/

//Code:

class Solution {
public:
	int subarraySum(vector<int>& nums, int k) {
		unordered_map<int, int> m;          //=> <prefixsum as a key and , count as a value>
        int n = nums.size();
        int sum = 0;
        int count = 0;
        m[0] = 1;
        for(int i=0; i<n; i++) {
            sum += nums[i];             //=> Calculating sum i -> k
            if(m.find(sum - k) != m.end()) {
                count += m[sum - k];          //=> Adding no. of prefixsum are encountered till now
            }
            m[sum]++;       //=> Adding prefix sum to map
        }
        return count;


        //TC = O(Log n)
        //SC = O(N)
	}
};

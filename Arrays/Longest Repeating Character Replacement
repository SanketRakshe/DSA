You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.

Example 1:

Input: s = "ABAB", k = 2 
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.
Example 2:

Input: s = "AABABBA", k = 1 
Output: 4
Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".

The substring "BBBB" has the longest repeating letters, which is 4.

Constraints:

1 <= s.length <= 
1
0
5
10 
5
 
s consists of only uppercase English letters.
0 <= k <= s.length



//Code:

class Solution {
public:
	int characterReplacement(string s, int k) {
		int n = s.length();
        int start = 0;
        int maxfreq = 0;
        int res = 0;
        map<int, int> freq;

        for(int end = 0; end < n; end++) {
            freq[s[end]]++;
            maxfreq = max(maxfreq, freq[s[end]]);
             // len-maxFreq <= k, we have to find if the substring has atmost k different 
             //characters which we alter to make all the characters of the string equal
            while((end - start + 1) - maxfreq > k) {
                freq[s[start]]--;
                start++;
            }
            res = max(res, end-start+1);
        }
        return res;

        //Time Complexity : O(N)
        //Space Complexity : O(26) == O(1) 
	}
};

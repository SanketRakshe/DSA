/*
Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].

Return the answer in an array.

Example 1:

Input: nums = [8, 1, 2, 2, 3] 
Output: [4, 0, 1, 1, 3]
Explanation: For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). 
For nums[1]=1 does not exist any smaller number than it.
For nums[2]=2 there exist one smaller number than it (1). 
For nums[3]=2 there exist one smaller number than it (1). 
For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).
Example 2:

Input: nums = [6, 5, 4, 8] 
Output: [2, 1, 0, 3]
Explanation: 
Example 3:

Input: nums = [7, 7, 7, 7] 
Output: [0, 0, 0, 0]
Explanation: 
Constraints:

2 <= nums.length <= 500
0 <= nums[i] <= 100
*/

//Code:

class Solution {
public:
    /*int search(int val, vector<int> &v) {
        int low = 0, high = v.size()-1;
        while(low <= high) {
            int mid = low + (high - low)/2;
            if((mid == 0 || val > v[mid -1]) && (val == v[mid])) return mid;
            else if(val > v[mid]) low = mid + 1;
            else high = mid - 1;
        }
        return 0;
    }*/


	vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
		/*
        unordered_map<int, int> m;
        vector<int> ans = nums;
        sort(ans.begin(), ans.end());

        for(int i=nums.size() -1; i>=0; i--) {
            m[ans[i]] = i;
        }
        for(int i=0; i<nums.size(); i++) {
            nums[i] = m[nums[i]];
        }
        return nums;
        //TC = O(nlogn)
        //SC = O(N)
        */
        /*
        //Approch 2

        vector<int> v = nums;
        sort(v.begin(), v.end());
        int n = nums.size();
        for(int i=0; i<n; i++) {
            nums[i] = search(nums[i], v);
        }
        return nums;
        //TC = O(nlogn)
        //SC = O(n)
        */



        //Approch 3:

        vector<int> v(101);
        for(auto a: nums) v[a]++;
        vector<int> pre(v.size());
        for(int i=1; i<101; i++) {
            pre[i] = v[i - 1];
            v[i] += v[i - 1];
        }

        vector<int> ans(nums.size());
        for(int i=0; i<nums.size(); i++) ans[i] = pre[nums[i]];

        return ans;
        //TC = O(N)
        //SC = O(N)
	}
};

/*
Given a binary string s of 0's and 1's. The task is to find the maximum difference between the number of 0s and the number of 1s (number of 0s â€” number of 1s) for a substring . In case of all 1s print -1.

Example 1:

Input: s = "11000010001" 
Output: 6
Explanation: From index 2 to index 9, there are 7

0s and 1 1s, so number of 0s - number

of 1s is 6.
Example 2:

Input: s = "11" 
Output: -1
Explanation: 
Constraints:

1<=n<=
1
0
5
10 
5
 
s contains 0 and 1.
*/

//Code:

class Solution {
public:
	int getMaxDifference(string s) {
		int max_sum = INT_MIN;
        int curr_sum = 0;
        int n = s.size();
        for(int i=0; i<n; i++) {
            if(s[i] == '1') {
                curr_sum--;
            } 
            else if(s[i] == '0') {
                 curr_sum++;
            }
            max_sum = max(max_sum, curr_sum);
            if(curr_sum < 0) curr_sum = 0;
        }
        return max_sum;
	}
};

//T.C = O(N)
//T.C = O(1)

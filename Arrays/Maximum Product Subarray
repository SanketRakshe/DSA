/*
Given an integer array nums, find a 
subarray
 that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.


Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
 

Constraints:

1 <= nums.length <= 2 * 104
-10 <= nums[i] <= 10
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
*/

//Code:

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        //Slight modification in kedens algorithm because of some test cases giving diffrent outputs
        //Then we traverse the array from left to right then right to left and then return the ans..
        int curr_pro = 1;
        int max_pro = INT_MIN;
        int n = nums.size();
        for(int i=0; i<n; i++) {
            curr_pro *=nums[i];
            max_pro = max(max_pro, curr_pro);
            if(curr_pro == 0) curr_pro = 1;
        }
        int curr_Np = 1;
        for(int i = n-1; i >= 0; i--) {
            curr_Np *= nums[i];
            max_pro = max(max_pro, curr_Np);
            if(curr_Np == 0) curr_Np = 1;
        }
        return max_pro;
        
    }
};
//T.C = O(N)
//S.C = O(1)

/*
Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Example 1:

Input: nums = [3,2,3] 
Output: 3
Explanation: 
Example 2:

Input: nums = [2,2,1,1,1,2,2] 
Output: 2
Explanation: 
Constraints:

n == nums.length
1 <= n <=
5
∗
1
0
4
5∗10 
4
 
−
1
0
9
−10 
9
  <= nums[i] <= 
1
0
9
10 
9
*/

//Code:

class Solution {
public:
	int majorityElement(vector<int>& nums) {
		unordered_map<int, int> ump;
        int n = nums.size();
        for(auto x: nums) {
            ump[x]++;
        }
        for(auto x: ump) {
            if(x.second > n/2) {
                return x.first;
            }
        }
        return -1;
	}
};

//T.C = O(N)
//S.C = O(1)
